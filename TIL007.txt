-- Q1. 각 직위별로 총 월급을 출력하되 월급이 낮은 순으로 출력하라.
SELECT JOB, SUM(SAL)
FROM EMP
GROUP BY JOB
ORDER BY SUM(SAL) ASC;

-- Q2. 직위별 월급을 출력하되, 직위가 MANAGER인 사원들은 제외하라. 
    -- 그리고 그 총 월급이 5000보다 큰 직위와 총 월급만 출력하라
SELECT JOB, SUM(SAL)
FROM EMP
WHERE JOB NOT IN ('MANAGER')
GROUP BY JOB
HAVING (SUM(SAL) > 5000)
ORDER BY SUM(SAL) ASC;

--  Q3. 직위별 최대월급을 출력하되, 직위가 CLEARK인 사원들은 제외하라. 
     -- 그리고 그 최대월급이 2000이상인 직위와 최대직급을 최대 월급이 높은 순으로 정렬하여 출력하라.
SELECT JOB, MAX(SAL)
FROM EMP
WHERE JOB NOT IN ('CLEARK')
GROUP BY JOB
HAVING (MAX(SAL) >= 2000)
ORDER BY MAX(SAL) DESC;

-- Q4. 부서별 총 월급을 구하되 30번 부서를 제외하고 그 총월급이 8000 이상인 부서만 나오게 하고 
	-- 총월급이 높은 순으로 출력하라.
SELECT DEPTNO, SUM(SAL)
FROM EMP
WHERE DEPTNO NOT IN (30)
GROUP BY DEPTNO
HAVING (SUM(SAL) >= 8000)
ORDER BY SUM(SAL) DESC;

-- Q5. 부서별 평균월급을 구하되 커미션이 책정된 사원만 가져오고, 
 -- 그 평균월급이 1000달러 이상인 부서만 나오게 하고 , 평균월급이 높은 순으로 출력하라.
SELECT DEPTNO, AVG(SAL)
FROM EMP
WHERE COMM IS NOT NULL
GROUP BY DEPTNO
HAVING (AVG(SAL) >= 1000)
ORDER BY AVG(SAL) DESC;

***

-- Q1. 'JONES'의 월급보다 많은 월급을 받는 사원의 이름과 월급을 출력하자.

-- STEP 01 : 'JONES'의 월급
SELECT SAL
FROM EMP
WHERE ENAME = 'JONES'; -- 2975

-- STEP 02 : 많은 월급을 받는 사원의 이름과 월급을 출력하자.
SELECT ENAME, SAL
FROM EMP
WHERE (SAL>2975);

-- STEP 03 : 서브쿼리 이용해서 합치기. 
SELECT ENAME, SAL
FROM EMP
WHERE (SAL > (SELECT SAL
			 FROM EMP
			 WHERE ENAME = 'JONES'));


-- Q1. 직업이 'SALESMAN'인 사원들과 같은 월급을 받는 사원의 이름과 월급을 출력하자.
SELECT ENAME, SAL                        -- 메인쿼리(주 쿼리) : 서브쿼리를 조건으로 받은후 작동한다.
FROM EMP
WHERE SAL IN ( SELECT SAL                -- 서브쿼리(부 쿼리) : 먼저 작동해서 조건으로 들어간다.
			   FROM EMP
               WHERE JOB = 'SALESMAN');
               
-- Q2. 부서번호가 10번인 사원들과 같은 월급을 받는 사원의 이름과 월급을 출력하자.
SELECT ENAME, SAL
FROM EMP
WHERE SAL IN ( SELECT SAL
			   FROM EMP
               WHERE DEPTNO = 10);
    
-- Q3. 직업이 CLERK인 사원과 같은 부서에서 근무하는 사원의 이름과 월급과 부서번호를 출력하자.         
SELECT ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO IN (SELECT DEPTNO
				 FROM EMP
                 WHERE JOB = 'CLERK');

-- Q4. 'CHICAGO'에서 근무하는 사원들과 같은 부서에서 근무하는 사원의 이름과 월급을 출력하자.
SELECT ENAME, SAL
FROM EMP
WHERE DEPTNO = (SELECT DEPTNO
				FROM DEPT
                WHERE LOC = 'CHICAGO');

/*
ANY

 = ANY 	 하나라도 만족하는 값이 있으면 결과를 리턴하며 IN과 동일함
 > ANY 	 값들 중 최소값 보다 크면 결과를 리턴
 >= ANY 	 값들 중 최소값 보다 크거나 같으면 결과를 리턴
 < ANY 	 값들 중 최대값 보다 작으면 결과를 리턴
 <= ANY 	 값들 중 최대값 보다 작거나 같으면 결과를 리턴
 <> ANY 	 모든 값들 중 다른 값만 리턴 ,값이 하나일 때만 가능함

ALL

 > ALL 	 값들 중 최대값 보다 크면 결과를 리턴
 >= ALL 	 값들 중 최대값 보다 크거나 같으면 결과를 리턴
 < ALL 	 값들 중 최소값 보다 작으면 결과를 리턴
 <= ALL 	 값들 중 최소값 보다 작거나 같으면 결과를 리턴
 = ALL 	 모든 값들과 같아야 결과를 리턴, 값이 하나일 때만 가능함
 <> ALL 	 모든 값들과 다르면 결과를 리턴
 */		

 -- Q5. 부하직원이 있는 사원의 사원번호와 이름을 출력하자. <자신이 관리자>
SELECT *
FROM EMP;
             
SELECT EMPNO, ENAME
FROM EMP
WHERE EMPNO IN (SELECT MGR
				FROM EMP);     -- (DATA OR DATA OR ....NULL) = ANY

-- Q6. 부하직원이 없는 사원의 사원번호와 이름을 출력하자.
SELECT EMPNO, ENAME
FROM EMP
WHERE EMPNO NOT IN (SELECT IFNULL(MGR,0)
					FROM EMP); -- KING NULL 값을 리턴하게 된다
							   -- (DATA AND DATA AND ....NULL) = ANY

-- Q7. 'KING'이 직속상관인 사원의 이름과 월급을 출력하자.
SELECT ENAME, SAL
FROM EMP
WHERE MGR IN (SELECT EMPNO
			  FROM EMP
              WHERE ENAME = 'KING');

-- Q8. 20번 부서의 사원중 가장 많은 월급을 받는 사원들보다 더 많은 월급을 받는 사원들의 이름과 월급을 출력하자.
SELECT ENAME, SAL
FROM EMP
WHERE SAL > (SELECT MAX(SAL)
			 FROM EMP
             WHERE DEPTNO = 20);
             
-- ANY,ALL 연산자로 변형해보자.             
SELECT ENAME, SAL
FROM EMP
WHERE SAL > ALL(SELECT SAL
			 FROM EMP
             WHERE DEPTNO = 20);

-- Q9. 20번 부서의 사원중 가장 적은 월급을 받는 사원들보다 더 많은 월급을 받는 사원들의 이름과 월급을 출력하자.
SELECT ENAME, SAL
FROM EMP
WHERE SAL > (SELECT MIN(SAL)
			 FROM EMP
             WHERE DEPTNO = 20);
             
-- ANY,ALL 연산자로 변형해보자.              
SELECT ENAME, SAL 
FROM EMP
WHERE SAL > ANY(SELECT SAL
			    FROM EMP
                WHERE DEPTNO = 20);

-- Q10. 직업이 'SALESMAN'인 사원 중 가장 큰 월급을 받는 사원보다 더 많은 월급을 받는 사원들의 이름과 월급을 출력하자.
-- 		(단, MIN(),MAX() 등 함수를 사용하지 않고, 연산자를 이용 할 것)
SELECT ENAME, SAL
FROM EMP
WHERE SAL > ALL(SELECT SAL
				FROM EMP
                WHERE JOB = 'SALESMAN');

-- Q11. 직업이 'SALESMAN'인 사원 중 가장 적은 월급을 받는 사원보다 더 적은 월급을 받는 사원들의 이름과 월급을 출력하자.
-- 		(단, MIN(),MAX() 등 함수를 사용하지 않고, 연산자를 이용 할 것)
SELECT ENAME, SAL
FROM EMP
WHERE SAL < ALL(SELECT SAL
				FROM EMP
                WHERE JOB = 'SALESMAN');

-- Q1. 직업이 'SALESMAN'인 사원과 같은 부서에서 근무하고
-- AND
-- 같은 월급을 받는 사원들의 이름, 월급, 부서번호를 출력하라.
SELECT ENAME, SAL, DEPTNO
FROM EMP
WHERE SAL IN (SELECT SAL
			 FROM EMP
             WHERE DEPTNO)
AND DEPTNO IN (SELECT DEPTNO
			   FROM EMP
			   WHERE JOB = 'SALESMAN');

-- Q2. 30번 부서 사원들과 같은 월급과 같은 커미션을 받는 사원들의 이름, 월급, 커미션을 출력하자.
SELECT ENAME, SAL, COMM
FROM EMP
WHERE SAL IN (SELECT SAL
			  FROM EMP
              WHERE DEPTNO = 30)
AND COMM IN (SELECT COMM
			 FROM EMP
             WHERE DEPTNO = 30);

-- Q1. TEST 라는 테이블을 EMP 테이블로 만들어보자. -> 테이블 제약 규칙은 오지 않는다.
CREATE TABLE TEST
AS
SELECT * FROM EMP;

DESC EMP;
SELECT * FROM TEST;
-- Q2. TEST02 라는 테이블을 EMP 테이블로 원하는 칼럼만 추려서 만들어보자. -> 테이블 제약 규칙은 오지 않는다.
CREATE TABLE TEST02
AS
SELECT ENAME, EMPNO, SAL
FROM EMP;

DESC TEST02;
SELECT * FROM TEST02;
-- Q3. TEST03 라는 테이블을 EMP 테이블로 원하는 <컬럼과 원하는 컬럼명>으로 만들어보자. -> 테이블 제약 규칙은 오지 않는다.
CREATE TABLE TEST03(ENAME VARCHAR(50))
AS
SELECT ENAME
FROM EMP;

DESC TEST03;
SELECT * FROM TEST03;
-- Q4. TEST04 라는 테이블을 EMP 테이블로 만들어보자. -> 테이블 제약 규칙은 오지 않는다.
-- 'CHICAGO'에서 근무하는 사원들과 같은 부서에서 근무하는 사원의 이름과 월급으로 TEST04를 만들자.
CREATE TABLE TEST04
AS
SELECT ENAME, SAL
FROM EMP
WHERE DEPTNO IN ( SELECT DEPTNO
				FROM DEPT
                WHERE LOC = 'CHICAGO');
DESC TEST04;
SELECT * FROM TEST04;

DROP TABLE TEST,TEST02,TEST03,TEST04;